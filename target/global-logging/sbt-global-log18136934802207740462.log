[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.10.1 (Amazon.com Inc. Java 17.0.6)
[debug] Load.defaultLoad until apply took 242.1896ms
[debug]           Load.loadUnit: plugins took 165.7889ms
[debug]           Load.loadUnit: defsScala took 1.1626ms
[debug] [Loading] Scanning directory F:\ING3-2024\BigData\project_scala_spark\project
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in F:\ING3-2024\BigData\project_scala_spark\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 38.0615 ms
[debug]               Load.resolveProject(project_scala_spark-build) took 73.5358ms
[debug]             Load.loadTransitive: finalizeProject(Project(id project_scala_spark-build, base: F:\ING3-2024\BigData\project_scala_spark\project, plugins: List(<none>))) took 149.4154ms
[debug] [Loading] Done in F:\ING3-2024\BigData\project_scala_spark\project, returning: (project_scala_spark-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 215.3484ms
[debug]           Load.loadUnit: cleanEvalClasses took 0.3794ms
[debug]         Load.loadUnit(file:/F:/ING3-2024/BigData/project_scala_spark/project/, ...) took 396.0123ms
[debug]       Load.apply: load took 732.5116ms
[debug]       Load.apply: resolveProjects took 7.4369ms
[debug]       Load.apply: finalTransforms took 93.5655ms
[debug]       Load.apply: config.delegates took 11.736ms
[debug]       Load.apply: Def.make(settings)... took 671.1213ms
[debug]       Load.apply: structureIndex took 138.0403ms
[debug]       Load.apply: mkStreams took 2.076ms
[info] loading project definition from F:\ING3-2024\BigData\project_scala_spark\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug]     Load.loadUnit: plugins took 3019.9257ms
[debug]     Load.loadUnit: defsScala took 0.007ms
[debug] [Loading] Scanning directory F:\ING3-2024\BigData\project_scala_spark
[debug]       Load.loadUnit: mkEval took 6.5751ms
[debug] [Loading] Found root project root w/ remaining 
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 2.0962 ms
[info] loading settings for project root from build.sbt ...
[debug]         Load.resolveProject(root) took 2.9283ms
[debug]       Load.loadTransitive: finalizeProject(Project(id root, base: F:\ING3-2024\BigData\project_scala_spark, plugins: List(<none>))) took 5.9799ms
[debug] [Loading] Done in F:\ING3-2024\BigData\project_scala_spark, returning: (root)
[debug]     Load.loadUnit: loadedProjectsRaw took 4095.8732ms
[debug]     Load.loadUnit: cleanEvalClasses took 10.4079ms
[debug]   Load.loadUnit(file:/F:/ING3-2024/BigData/project_scala_spark/, ...) took 7128.3899ms
[debug] Load.apply: load took 7165.7018ms
[debug] Load.apply: resolveProjects took 0.107ms
[debug] Load.apply: finalTransforms took 42.5599ms
[debug] Load.apply: config.delegates took 0.7631ms
[debug] Load.apply: Def.make(settings)... took 91.0294ms
[debug] Load.apply: structureIndex took 34.5533ms
[debug] Load.apply: mkStreams took 0.0019ms
[info] set current project to project_scala_spark (in build file:/F:/ING3-2024/BigData/project_scala_spark/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(shell, None, None)
[info] sbt server started at local:sbt-server-8c8f825dd6cfcf6dd60c
[debug] Writing bsp connection file
[info] started sbt server
